package test;

import java.util.Scanner;
import java.util.StringTokenizer;

public class Main18 {

	public static void main(String[] args) {
		
		
		
		/*
		 * <문제>
		 * ACM 호텔 매니저 지우는 손님이 도착하는 대로 빈 방을 배정하고 있다. 고객 설문조사에 따르면 손님들은 호텔 정문으로부터 걸어서 가장 짧은 거리에 있는 방을 선호한다고 한다. 여러분은 지우를 도와 줄 프로그램을 작성하고자 한다. 즉 설문조사 결과 대로 호텔
		 * 정문으로부터 걷는 거리가 가장 짧도록 방을 배정하는 프로그램을 작성하고자 한다. 문제를 단순화하기 위해서 호텔은 직사각형 모양이라고 가정하자.
		 * 각 층에 W 개의 방이 있는 H 층 건물이라고 가정하자 (1 ≤ H, W ≤ 99). 그리고 엘리베이터는 가장 왼쪽에 있다고 가정하자.
		 * 이런 형태의 호텔을 H × W 형태 호텔이라고 부른다. 호텔 정문은 일층 엘리베이터 바로 앞에 있는데, 정문에서 엘리베이터까지의 거리는 무시한다. 또 모든 인접한 두 방 사이의 거리는 같은 거리(거리 1)라고 가정하고 호텔의 정면 쪽에만 방이 있다고 가정한다.
		 * 방 번호는 YXX 나 YYXX 형태인데 여기서 Y 나 YY 는 층 수를 나타내고 XX 는 엘리베이터에서부터 세었을 때의 번호를 나타낸다. 즉, 그림 1 에서 빗금으로 표시한 방은 305 호가 된다. 손님은 엘리베이터를 타고 이동하는 거리는 신경 쓰지 않는다.
		 * 다만 걷는 거리가 같을 때에는 아래층의 방을 더 선호한다. 예를 들면 102 호 방보다는 301 호 방을 더 선호하는데, 102 호는 거리 2 만큼 걸어야 하지만 301 호는 거리 1 만큼만 걸으면 되기 때문이다. 같은 이유로 102 호보다 2101 호를 더 선호한다.
		 * 여러분이 작성할 프로그램은 초기에 모든 방이 비어있다고 가정하에 이 정책에 따라 N 번째로 도착한 손님에게 배정될 방 번호를 계산하는 프로그램이다. 첫 번째 손님은 101 호, 두 번째 손님은 201 호 등과 같이 배정한다.
		 * 예로 들면, H = 6, W=12일때 10 번째 손님은 402 호에 배정해야 한다.
		 * 프로그램은 표준 입력에서 입력 데이터를 받는다. 프로그램의 입력은 T 개의 테스트 데이터로 이루어져 있는데 T 는 입력의 맨 첫 줄에 주어진다.
		 * 각 테스트 데이터는 한 행으로서 H, W, N, 세 정수를 포함하고 있으며 각각 호텔의 층 수, 각 층의 방 수, 몇 번째 손님인지를 나타낸다(1 ≤ H, W ≤ 99, 1 ≤ N ≤ H × W).
		 * 프로그램은 표준 출력에 출력한다. 각 테스트 데이터마다 정확히 한 행을 출력하는데, 내용은 N 번째 손님에게 배정되어야 하는 방 번호를 출력한다.
		 */
		
		Scanner sc=new Scanner(System.in);
		int t= sc.nextInt();
		int x, y=0;
		
		
		
		
		for(int i=0; i<t; i++) {
			
			int h= sc.nextInt();
			int w= sc.nextInt();
			int n= sc.nextInt();
			
			if(n%h ==0 ) {  //n번째 손님 층 수 구하기 : (n%h)*100
				            //n번째 손님 엘리베이터와의 거리 구하기 : (n/h)+1
				 y=h*100;   
				 x=n/h; 
			
			}else {
					y=(n%h)*100;
					x=(n/h)+1;
			
				}
			
			System.out.println(y+x);
		}
			
		
		String none=sc.nextLine(); // => 문제풀이 코드와는 상관없음!!
								   //문제 2개를 하나의 class에 풀이하였기에 다음 문제의 값을 입력받기 전 Enter를 입력받고 각각의 문제가 올바르게 출력되게 하기 위함.
		
		/*
		 * <문제>
		 * 영어 대소문자와 공백으로 이루어진 문자열이 주어진다. 이 문자열에는 몇 개의 단어가 있을까? 이를 구하는 프로그램을 작성하시오.
		 * 단, 한 단어가 여러 번 등장하면 등장한 횟수만큼 모두 세어야 한다.
		 * 첫 줄에 영어 대소문자와 공백으로 이루어진 문자열이 주어진다. 이 문자열의 길이는 1,000,000을 넘지 않는다.
		 * 단어는 공백 한 개로 구분되며, 공백이 연속해서 나오는 경우는 없다. 또한 문자열은 공백으로 시작하거나 끝날 수 있다.
		 * 첫째 줄에 단어의 개수를 출력한다.
		 */
		String str=sc.nextLine(); // => 공백이 포함된 문자열 받을 때
		
		StringTokenizer st=new StringTokenizer(str," "); //입력받은 문자열을 공백을 기준으로 나눈 토큰들을 저장
		
		System.out.println(st.countTokens()); //토큰의 개수를 리턴
		
		
		
		
		
		
		
		/*
		 * <문제>
		 * 총 A개의 정수가 주어졌을 때, 정수 v가 몇 개인지 구하는 프로그램을 작성하시오.
		 * 첫째 줄에 정수의 개수 A(1 ≤ A ≤ 100)이 주어진다. 둘째 줄에는 정수가 공백으로 구분되어져있다.
		 * 셋째 줄에는 찾으려고 하는 정수 v가 주어진다.
		 * 입력으로 주어지는 정수와 v는 -100보다 크거나 같으며, 100보다 작거나 같다. 
		 * 첫째 줄에 입력으로 주어진 A개의 정수 중에 v가 몇 개인지 출력한다.
		 */
		int a=sc.nextInt();
		int[] arr=new int[a];
		int count=0;   // 정수 v의 갯수
		
		for(int i=0; i<a; i++) {
			arr[i]=sc.nextInt();
		}
		
		int v = sc.nextInt();
		
		for(int i=0; i<arr.length; i++) {
			if(arr[i]==v) {
				count++;
			}
		}
		
		System.out.println(count);
		
		
		
		
	}
			
			
			
}
	

